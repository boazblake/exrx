// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  biometric: (where?: BiometricWhereInput) => Promise<boolean>;
  client: (where?: ClientWhereInput) => Promise<boolean>;
  documents: (where?: DocumentsWhereInput) => Promise<boolean>;
  heightMeasure: (where?: HeightMeasureWhereInput) => Promise<boolean>;
  unit: (where?: UnitWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  weightMeasure: (where?: WeightMeasureWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  biometric: (where: BiometricWhereUniqueInput) => BiometricNullablePromise;
  biometrics: (args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Biometric>;
  biometricsConnection: (args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BiometricConnectionPromise;
  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  documents: (where: DocumentsWhereUniqueInput) => DocumentsNullablePromise;
  documentses: (args?: {
    where?: DocumentsWhereInput;
    orderBy?: DocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Documents>;
  documentsesConnection: (args?: {
    where?: DocumentsWhereInput;
    orderBy?: DocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DocumentsConnectionPromise;
  heightMeasure: (
    where: HeightMeasureWhereUniqueInput
  ) => HeightMeasureNullablePromise;
  heightMeasures: (args?: {
    where?: HeightMeasureWhereInput;
    orderBy?: HeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<HeightMeasure>;
  heightMeasuresConnection: (args?: {
    where?: HeightMeasureWhereInput;
    orderBy?: HeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HeightMeasureConnectionPromise;
  unit: (where: UnitWhereUniqueInput) => UnitNullablePromise;
  units: (args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Unit>;
  unitsConnection: (args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UnitConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  weightMeasure: (
    where: WeightMeasureWhereUniqueInput
  ) => WeightMeasureNullablePromise;
  weightMeasures: (args?: {
    where?: WeightMeasureWhereInput;
    orderBy?: WeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WeightMeasure>;
  weightMeasuresConnection: (args?: {
    where?: WeightMeasureWhereInput;
    orderBy?: WeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WeightMeasureConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBiometric: (data: BiometricCreateInput) => BiometricPromise;
  updateBiometric: (args: {
    data: BiometricUpdateInput;
    where: BiometricWhereUniqueInput;
  }) => BiometricPromise;
  upsertBiometric: (args: {
    where: BiometricWhereUniqueInput;
    create: BiometricCreateInput;
    update: BiometricUpdateInput;
  }) => BiometricPromise;
  deleteBiometric: (where: BiometricWhereUniqueInput) => BiometricPromise;
  deleteManyBiometrics: (where?: BiometricWhereInput) => BatchPayloadPromise;
  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createDocuments: (data: DocumentsCreateInput) => DocumentsPromise;
  updateDocuments: (args: {
    data: DocumentsUpdateInput;
    where: DocumentsWhereUniqueInput;
  }) => DocumentsPromise;
  updateManyDocumentses: (args: {
    data: DocumentsUpdateManyMutationInput;
    where?: DocumentsWhereInput;
  }) => BatchPayloadPromise;
  upsertDocuments: (args: {
    where: DocumentsWhereUniqueInput;
    create: DocumentsCreateInput;
    update: DocumentsUpdateInput;
  }) => DocumentsPromise;
  deleteDocuments: (where: DocumentsWhereUniqueInput) => DocumentsPromise;
  deleteManyDocumentses: (where?: DocumentsWhereInput) => BatchPayloadPromise;
  createHeightMeasure: (data: HeightMeasureCreateInput) => HeightMeasurePromise;
  updateHeightMeasure: (args: {
    data: HeightMeasureUpdateInput;
    where: HeightMeasureWhereUniqueInput;
  }) => HeightMeasurePromise;
  updateManyHeightMeasures: (args: {
    data: HeightMeasureUpdateManyMutationInput;
    where?: HeightMeasureWhereInput;
  }) => BatchPayloadPromise;
  upsertHeightMeasure: (args: {
    where: HeightMeasureWhereUniqueInput;
    create: HeightMeasureCreateInput;
    update: HeightMeasureUpdateInput;
  }) => HeightMeasurePromise;
  deleteHeightMeasure: (
    where: HeightMeasureWhereUniqueInput
  ) => HeightMeasurePromise;
  deleteManyHeightMeasures: (
    where?: HeightMeasureWhereInput
  ) => BatchPayloadPromise;
  createUnit: (data: UnitCreateInput) => UnitPromise;
  updateUnit: (args: {
    data: UnitUpdateInput;
    where: UnitWhereUniqueInput;
  }) => UnitPromise;
  updateManyUnits: (args: {
    data: UnitUpdateManyMutationInput;
    where?: UnitWhereInput;
  }) => BatchPayloadPromise;
  upsertUnit: (args: {
    where: UnitWhereUniqueInput;
    create: UnitCreateInput;
    update: UnitUpdateInput;
  }) => UnitPromise;
  deleteUnit: (where: UnitWhereUniqueInput) => UnitPromise;
  deleteManyUnits: (where?: UnitWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWeightMeasure: (data: WeightMeasureCreateInput) => WeightMeasurePromise;
  updateWeightMeasure: (args: {
    data: WeightMeasureUpdateInput;
    where: WeightMeasureWhereUniqueInput;
  }) => WeightMeasurePromise;
  updateManyWeightMeasures: (args: {
    data: WeightMeasureUpdateManyMutationInput;
    where?: WeightMeasureWhereInput;
  }) => BatchPayloadPromise;
  upsertWeightMeasure: (args: {
    where: WeightMeasureWhereUniqueInput;
    create: WeightMeasureCreateInput;
    update: WeightMeasureUpdateInput;
  }) => WeightMeasurePromise;
  deleteWeightMeasure: (
    where: WeightMeasureWhereUniqueInput
  ) => WeightMeasurePromise;
  deleteManyWeightMeasures: (
    where?: WeightMeasureWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  biometric: (
    where?: BiometricSubscriptionWhereInput
  ) => BiometricSubscriptionPayloadSubscription;
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  documents: (
    where?: DocumentsSubscriptionWhereInput
  ) => DocumentsSubscriptionPayloadSubscription;
  heightMeasure: (
    where?: HeightMeasureSubscriptionWhereInput
  ) => HeightMeasureSubscriptionPayloadSubscription;
  unit: (
    where?: UnitSubscriptionWhereInput
  ) => UnitSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  weightMeasure: (
    where?: WeightMeasureSubscriptionWhereInput
  ) => WeightMeasureSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BiometricOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DocumentsOrderByInput =
  | "title_ASC"
  | "title_DESC"
  | "isRequired_ASC"
  | "isRequired_DESC"
  | "isSubmitted_ASC"
  | "isSubmitted_DESC"
  | "hasFlag_ASC"
  | "hasFlag_DESC"
  | "flagMsg_ASC"
  | "flagMsg_DESC"
  | "path_ASC"
  | "path_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClientOrderByInput =
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WeightMeasureOrderByInput =
  | "value_ASC"
  | "value_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HeightMeasureOrderByInput =
  | "value_ASC"
  | "value_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UnitOrderByInput =
  | "brevis_ASC"
  | "brevis_DESC"
  | "name_ASC"
  | "name_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutClientsInput {
  create?: Maybe<UserCreateWithoutClientsInput>;
  update?: Maybe<UserUpdateWithoutClientsDataInput>;
  upsert?: Maybe<UserUpsertWithoutClientsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type BiometricWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface WeightMeasureUpdateWithWhereUniqueNestedInput {
  where: WeightMeasureWhereUniqueInput;
  data: WeightMeasureUpdateDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  clients_every?: Maybe<ClientWhereInput>;
  clients_some?: Maybe<ClientWhereInput>;
  clients_none?: Maybe<ClientWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface WeightMeasureUpdateDataInput {
  unit?: Maybe<UnitUpdateOneRequiredInput>;
  value?: Maybe<Float>;
}

export interface UnitWhereInput {
  brevis?: Maybe<String>;
  brevis_not?: Maybe<String>;
  brevis_in?: Maybe<String[] | String>;
  brevis_not_in?: Maybe<String[] | String>;
  brevis_lt?: Maybe<String>;
  brevis_lte?: Maybe<String>;
  brevis_gt?: Maybe<String>;
  brevis_gte?: Maybe<String>;
  brevis_contains?: Maybe<String>;
  brevis_not_contains?: Maybe<String>;
  brevis_starts_with?: Maybe<String>;
  brevis_not_starts_with?: Maybe<String>;
  brevis_ends_with?: Maybe<String>;
  brevis_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UnitWhereInput[] | UnitWhereInput>;
  OR?: Maybe<UnitWhereInput[] | UnitWhereInput>;
  NOT?: Maybe<UnitWhereInput[] | UnitWhereInput>;
}

export interface UnitUpdateOneRequiredInput {
  create?: Maybe<UnitCreateInput>;
  update?: Maybe<UnitUpdateDataInput>;
  upsert?: Maybe<UnitUpsertNestedInput>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface HeightMeasureWhereInput {
  unit?: Maybe<UnitWhereInput>;
  value?: Maybe<Float>;
  value_not?: Maybe<Float>;
  value_in?: Maybe<Float[] | Float>;
  value_not_in?: Maybe<Float[] | Float>;
  value_lt?: Maybe<Float>;
  value_lte?: Maybe<Float>;
  value_gt?: Maybe<Float>;
  value_gte?: Maybe<Float>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HeightMeasureWhereInput[] | HeightMeasureWhereInput>;
  OR?: Maybe<HeightMeasureWhereInput[] | HeightMeasureWhereInput>;
  NOT?: Maybe<HeightMeasureWhereInput[] | HeightMeasureWhereInput>;
}

export interface WeightMeasureCreateManyInput {
  create?: Maybe<WeightMeasureCreateInput[] | WeightMeasureCreateInput>;
  connect?: Maybe<
    WeightMeasureWhereUniqueInput[] | WeightMeasureWhereUniqueInput
  >;
}

export interface BiometricUpsertWithWhereUniqueWithoutClientIdInput {
  where: BiometricWhereUniqueInput;
  update: BiometricUpdateWithoutClientIdDataInput;
  create: BiometricCreateWithoutClientIdInput;
}

export interface WeightMeasureCreateInput {
  unit: UnitCreateOneInput;
  value: Float;
  id?: Maybe<ID_Input>;
}

export interface UnitUpdateDataInput {
  brevis?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UnitCreateOneInput {
  create?: Maybe<UnitCreateInput>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UnitCreateInput {
  brevis: String;
  name: String;
  id?: Maybe<ID_Input>;
}

export interface BiometricWhereInput {
  clientId?: Maybe<ClientWhereInput>;
  weights_every?: Maybe<WeightMeasureWhereInput>;
  weights_some?: Maybe<WeightMeasureWhereInput>;
  weights_none?: Maybe<WeightMeasureWhereInput>;
  heights_every?: Maybe<HeightMeasureWhereInput>;
  heights_some?: Maybe<HeightMeasureWhereInput>;
  heights_none?: Maybe<HeightMeasureWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BiometricWhereInput[] | BiometricWhereInput>;
  OR?: Maybe<BiometricWhereInput[] | BiometricWhereInput>;
  NOT?: Maybe<BiometricWhereInput[] | BiometricWhereInput>;
}

export interface HeightMeasureCreateManyInput {
  create?: Maybe<HeightMeasureCreateInput[] | HeightMeasureCreateInput>;
  connect?: Maybe<
    HeightMeasureWhereUniqueInput[] | HeightMeasureWhereUniqueInput
  >;
}

export interface HeightMeasureSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HeightMeasureWhereInput>;
  AND?: Maybe<
    HeightMeasureSubscriptionWhereInput[] | HeightMeasureSubscriptionWhereInput
  >;
  OR?: Maybe<
    HeightMeasureSubscriptionWhereInput[] | HeightMeasureSubscriptionWhereInput
  >;
  NOT?: Maybe<
    HeightMeasureSubscriptionWhereInput[] | HeightMeasureSubscriptionWhereInput
  >;
}

export interface HeightMeasureCreateInput {
  unit: UnitCreateOneInput;
  value: Float;
  id?: Maybe<ID_Input>;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  OR?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  NOT?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface BiometricUpdateInput {
  clientId?: Maybe<ClientUpdateOneWithoutBiometricsInput>;
  weights?: Maybe<WeightMeasureUpdateManyInput>;
  heights?: Maybe<HeightMeasureUpdateManyInput>;
}

export interface WeightMeasureUpdateManyMutationInput {
  value?: Maybe<Float>;
}

export interface ClientUpdateOneWithoutBiometricsInput {
  create?: Maybe<ClientCreateWithoutBiometricsInput>;
  update?: Maybe<ClientUpdateWithoutBiometricsDataInput>;
  upsert?: Maybe<ClientUpsertWithoutBiometricsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  userId?: Maybe<String>;
}

export interface ClientUpdateWithoutBiometricsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  documents?: Maybe<DocumentsUpdateManyWithoutClientIdInput>;
  trainer?: Maybe<UserUpdateOneWithoutClientsInput>;
}

export interface ClientUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
}

export interface DocumentsUpdateManyWithoutClientIdInput {
  create?: Maybe<
    DocumentsCreateWithoutClientIdInput[] | DocumentsCreateWithoutClientIdInput
  >;
  delete?: Maybe<DocumentsWhereUniqueInput[] | DocumentsWhereUniqueInput>;
  connect?: Maybe<DocumentsWhereUniqueInput[] | DocumentsWhereUniqueInput>;
  set?: Maybe<DocumentsWhereUniqueInput[] | DocumentsWhereUniqueInput>;
  disconnect?: Maybe<DocumentsWhereUniqueInput[] | DocumentsWhereUniqueInput>;
  update?: Maybe<
    | DocumentsUpdateWithWhereUniqueWithoutClientIdInput[]
    | DocumentsUpdateWithWhereUniqueWithoutClientIdInput
  >;
  upsert?: Maybe<
    | DocumentsUpsertWithWhereUniqueWithoutClientIdInput[]
    | DocumentsUpsertWithWhereUniqueWithoutClientIdInput
  >;
  deleteMany?: Maybe<DocumentsScalarWhereInput[] | DocumentsScalarWhereInput>;
  updateMany?: Maybe<
    | DocumentsUpdateManyWithWhereNestedInput[]
    | DocumentsUpdateManyWithWhereNestedInput
  >;
}

export interface ClientScalarWhereInput {
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  OR?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  NOT?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
}

export interface DocumentsUpdateWithWhereUniqueWithoutClientIdInput {
  where: DocumentsWhereUniqueInput;
  data: DocumentsUpdateWithoutClientIdDataInput;
}

export interface ClientUpsertWithWhereUniqueWithoutTrainerInput {
  where: ClientWhereUniqueInput;
  update: ClientUpdateWithoutTrainerDataInput;
  create: ClientCreateWithoutTrainerInput;
}

export interface DocumentsUpdateWithoutClientIdDataInput {
  title?: Maybe<String>;
  isRequired?: Maybe<Boolean>;
  isSubmitted?: Maybe<Boolean>;
  hasFlag?: Maybe<Boolean>;
  flagMsg?: Maybe<String>;
  path?: Maybe<String>;
}

export interface ClientUpdateWithWhereUniqueWithoutTrainerInput {
  where: ClientWhereUniqueInput;
  data: ClientUpdateWithoutTrainerDataInput;
}

export interface DocumentsUpsertWithWhereUniqueWithoutClientIdInput {
  where: DocumentsWhereUniqueInput;
  update: DocumentsUpdateWithoutClientIdDataInput;
  create: DocumentsCreateWithoutClientIdInput;
}

export interface ClientUpdateManyWithoutTrainerInput {
  create?: Maybe<
    ClientCreateWithoutTrainerInput[] | ClientCreateWithoutTrainerInput
  >;
  delete?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  connect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  set?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  disconnect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  update?: Maybe<
    | ClientUpdateWithWhereUniqueWithoutTrainerInput[]
    | ClientUpdateWithWhereUniqueWithoutTrainerInput
  >;
  upsert?: Maybe<
    | ClientUpsertWithWhereUniqueWithoutTrainerInput[]
    | ClientUpsertWithWhereUniqueWithoutTrainerInput
  >;
  deleteMany?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  updateMany?: Maybe<
    | ClientUpdateManyWithWhereNestedInput[]
    | ClientUpdateManyWithWhereNestedInput
  >;
}

export interface DocumentsScalarWhereInput {
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  isRequired?: Maybe<Boolean>;
  isRequired_not?: Maybe<Boolean>;
  isSubmitted?: Maybe<Boolean>;
  isSubmitted_not?: Maybe<Boolean>;
  hasFlag?: Maybe<Boolean>;
  hasFlag_not?: Maybe<Boolean>;
  flagMsg?: Maybe<String>;
  flagMsg_not?: Maybe<String>;
  flagMsg_in?: Maybe<String[] | String>;
  flagMsg_not_in?: Maybe<String[] | String>;
  flagMsg_lt?: Maybe<String>;
  flagMsg_lte?: Maybe<String>;
  flagMsg_gt?: Maybe<String>;
  flagMsg_gte?: Maybe<String>;
  flagMsg_contains?: Maybe<String>;
  flagMsg_not_contains?: Maybe<String>;
  flagMsg_starts_with?: Maybe<String>;
  flagMsg_not_starts_with?: Maybe<String>;
  flagMsg_ends_with?: Maybe<String>;
  flagMsg_not_ends_with?: Maybe<String>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DocumentsScalarWhereInput[] | DocumentsScalarWhereInput>;
  OR?: Maybe<DocumentsScalarWhereInput[] | DocumentsScalarWhereInput>;
  NOT?: Maybe<DocumentsScalarWhereInput[] | DocumentsScalarWhereInput>;
}

export interface ClientCreateWithoutTrainerInput {
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  biometrics?: Maybe<BiometricCreateManyWithoutClientIdInput>;
  documents?: Maybe<DocumentsCreateManyWithoutClientIdInput>;
  id?: Maybe<ID_Input>;
}

export interface DocumentsUpdateManyWithWhereNestedInput {
  where: DocumentsScalarWhereInput;
  data: DocumentsUpdateManyDataInput;
}

export interface ClientCreateManyWithoutTrainerInput {
  create?: Maybe<
    ClientCreateWithoutTrainerInput[] | ClientCreateWithoutTrainerInput
  >;
  connect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
}

export interface DocumentsUpdateManyDataInput {
  title?: Maybe<String>;
  isRequired?: Maybe<Boolean>;
  isSubmitted?: Maybe<Boolean>;
  hasFlag?: Maybe<Boolean>;
  flagMsg?: Maybe<String>;
  path?: Maybe<String>;
}

export interface UnitUpdateManyMutationInput {
  brevis?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ClientCreateWithoutDocumentsInput {
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  biometrics?: Maybe<BiometricCreateManyWithoutClientIdInput>;
  trainer?: Maybe<UserCreateOneWithoutClientsInput>;
  id?: Maybe<ID_Input>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userId?: Maybe<String>;
}>;

export interface UserUpdateWithoutClientsDataInput {
  userId?: Maybe<String>;
}

export interface HeightMeasureUpdateInput {
  unit?: Maybe<UnitUpdateOneRequiredInput>;
  value?: Maybe<Float>;
}

export interface UserUpsertWithoutClientsInput {
  update: UserUpdateWithoutClientsDataInput;
  create: UserCreateWithoutClientsInput;
}

export interface ClientUpsertWithoutDocumentsInput {
  update: ClientUpdateWithoutDocumentsDataInput;
  create: ClientCreateWithoutDocumentsInput;
}

export interface ClientUpsertWithoutBiometricsInput {
  update: ClientUpdateWithoutBiometricsDataInput;
  create: ClientCreateWithoutBiometricsInput;
}

export interface ClientUpdateWithoutDocumentsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  biometrics?: Maybe<BiometricUpdateManyWithoutClientIdInput>;
  trainer?: Maybe<UserUpdateOneWithoutClientsInput>;
}

export interface WeightMeasureUpdateManyInput {
  create?: Maybe<WeightMeasureCreateInput[] | WeightMeasureCreateInput>;
  update?: Maybe<
    | WeightMeasureUpdateWithWhereUniqueNestedInput[]
    | WeightMeasureUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WeightMeasureUpsertWithWhereUniqueNestedInput[]
    | WeightMeasureUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    WeightMeasureWhereUniqueInput[] | WeightMeasureWhereUniqueInput
  >;
  connect?: Maybe<
    WeightMeasureWhereUniqueInput[] | WeightMeasureWhereUniqueInput
  >;
  set?: Maybe<WeightMeasureWhereUniqueInput[] | WeightMeasureWhereUniqueInput>;
  disconnect?: Maybe<
    WeightMeasureWhereUniqueInput[] | WeightMeasureWhereUniqueInput
  >;
  deleteMany?: Maybe<
    WeightMeasureScalarWhereInput[] | WeightMeasureScalarWhereInput
  >;
  updateMany?: Maybe<
    | WeightMeasureUpdateManyWithWhereNestedInput[]
    | WeightMeasureUpdateManyWithWhereNestedInput
  >;
}

export interface DocumentsUpdateInput {
  clientId?: Maybe<ClientUpdateOneWithoutDocumentsInput>;
  title?: Maybe<String>;
  isRequired?: Maybe<Boolean>;
  isSubmitted?: Maybe<Boolean>;
  hasFlag?: Maybe<Boolean>;
  flagMsg?: Maybe<String>;
  path?: Maybe<String>;
}

export interface WeightMeasureWhereInput {
  unit?: Maybe<UnitWhereInput>;
  value?: Maybe<Float>;
  value_not?: Maybe<Float>;
  value_in?: Maybe<Float[] | Float>;
  value_not_in?: Maybe<Float[] | Float>;
  value_lt?: Maybe<Float>;
  value_lte?: Maybe<Float>;
  value_gt?: Maybe<Float>;
  value_gte?: Maybe<Float>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WeightMeasureWhereInput[] | WeightMeasureWhereInput>;
  OR?: Maybe<WeightMeasureWhereInput[] | WeightMeasureWhereInput>;
  NOT?: Maybe<WeightMeasureWhereInput[] | WeightMeasureWhereInput>;
}

export interface BiometricCreateInput {
  clientId?: Maybe<ClientCreateOneWithoutBiometricsInput>;
  weights?: Maybe<WeightMeasureCreateManyInput>;
  heights?: Maybe<HeightMeasureCreateManyInput>;
  id?: Maybe<ID_Input>;
}

export interface ClientCreateOneWithoutDocumentsInput {
  create?: Maybe<ClientCreateWithoutDocumentsInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientCreateWithoutBiometricsInput {
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  documents?: Maybe<DocumentsCreateManyWithoutClientIdInput>;
  trainer?: Maybe<UserCreateOneWithoutClientsInput>;
  id?: Maybe<ID_Input>;
}

export interface DocumentsCreateInput {
  clientId?: Maybe<ClientCreateOneWithoutDocumentsInput>;
  title: String;
  isRequired: Boolean;
  isSubmitted: Boolean;
  hasFlag: Boolean;
  flagMsg?: Maybe<String>;
  path?: Maybe<String>;
  id?: Maybe<ID_Input>;
}

export interface DocumentsCreateWithoutClientIdInput {
  title: String;
  isRequired: Boolean;
  isSubmitted: Boolean;
  hasFlag: Boolean;
  flagMsg?: Maybe<String>;
  path?: Maybe<String>;
  id?: Maybe<ID_Input>;
}

export interface DocumentsWhereInput {
  clientId?: Maybe<ClientWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  isRequired?: Maybe<Boolean>;
  isRequired_not?: Maybe<Boolean>;
  isSubmitted?: Maybe<Boolean>;
  isSubmitted_not?: Maybe<Boolean>;
  hasFlag?: Maybe<Boolean>;
  hasFlag_not?: Maybe<Boolean>;
  flagMsg?: Maybe<String>;
  flagMsg_not?: Maybe<String>;
  flagMsg_in?: Maybe<String[] | String>;
  flagMsg_not_in?: Maybe<String[] | String>;
  flagMsg_lt?: Maybe<String>;
  flagMsg_lte?: Maybe<String>;
  flagMsg_gt?: Maybe<String>;
  flagMsg_gte?: Maybe<String>;
  flagMsg_contains?: Maybe<String>;
  flagMsg_not_contains?: Maybe<String>;
  flagMsg_starts_with?: Maybe<String>;
  flagMsg_not_starts_with?: Maybe<String>;
  flagMsg_ends_with?: Maybe<String>;
  flagMsg_not_ends_with?: Maybe<String>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DocumentsWhereInput[] | DocumentsWhereInput>;
  OR?: Maybe<DocumentsWhereInput[] | DocumentsWhereInput>;
  NOT?: Maybe<DocumentsWhereInput[] | DocumentsWhereInput>;
}

export interface UserCreateWithoutClientsInput {
  id?: Maybe<ID_Input>;
  userId: String;
}

export interface UnitUpsertNestedInput {
  update: UnitUpdateDataInput;
  create: UnitCreateInput;
}

export interface ClientWhereInput {
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  biometrics_every?: Maybe<BiometricWhereInput>;
  biometrics_some?: Maybe<BiometricWhereInput>;
  biometrics_none?: Maybe<BiometricWhereInput>;
  documents_every?: Maybe<DocumentsWhereInput>;
  documents_some?: Maybe<DocumentsWhereInput>;
  documents_none?: Maybe<DocumentsWhereInput>;
  trainer?: Maybe<UserWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  OR?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  NOT?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export interface WeightMeasureUpsertWithWhereUniqueNestedInput {
  where: WeightMeasureWhereUniqueInput;
  update: WeightMeasureUpdateDataInput;
  create: WeightMeasureCreateInput;
}

export interface DocumentsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DocumentsWhereInput>;
  AND?: Maybe<
    DocumentsSubscriptionWhereInput[] | DocumentsSubscriptionWhereInput
  >;
  OR?: Maybe<
    DocumentsSubscriptionWhereInput[] | DocumentsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DocumentsSubscriptionWhereInput[] | DocumentsSubscriptionWhereInput
  >;
}

export interface WeightMeasureScalarWhereInput {
  value?: Maybe<Float>;
  value_not?: Maybe<Float>;
  value_in?: Maybe<Float[] | Float>;
  value_not_in?: Maybe<Float[] | Float>;
  value_lt?: Maybe<Float>;
  value_lte?: Maybe<Float>;
  value_gt?: Maybe<Float>;
  value_gte?: Maybe<Float>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WeightMeasureScalarWhereInput[] | WeightMeasureScalarWhereInput>;
  OR?: Maybe<WeightMeasureScalarWhereInput[] | WeightMeasureScalarWhereInput>;
  NOT?: Maybe<WeightMeasureScalarWhereInput[] | WeightMeasureScalarWhereInput>;
}

export interface WeightMeasureUpdateInput {
  unit?: Maybe<UnitUpdateOneRequiredInput>;
  value?: Maybe<Float>;
}

export interface WeightMeasureUpdateManyWithWhereNestedInput {
  where: WeightMeasureScalarWhereInput;
  data: WeightMeasureUpdateManyDataInput;
}

export interface ClientUpdateManyWithWhereNestedInput {
  where: ClientScalarWhereInput;
  data: ClientUpdateManyDataInput;
}

export interface WeightMeasureUpdateManyDataInput {
  value?: Maybe<Float>;
}

export interface ClientUpdateWithoutTrainerDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  biometrics?: Maybe<BiometricUpdateManyWithoutClientIdInput>;
  documents?: Maybe<DocumentsUpdateManyWithoutClientIdInput>;
}

export interface HeightMeasureUpdateManyInput {
  create?: Maybe<HeightMeasureCreateInput[] | HeightMeasureCreateInput>;
  update?: Maybe<
    | HeightMeasureUpdateWithWhereUniqueNestedInput[]
    | HeightMeasureUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | HeightMeasureUpsertWithWhereUniqueNestedInput[]
    | HeightMeasureUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    HeightMeasureWhereUniqueInput[] | HeightMeasureWhereUniqueInput
  >;
  connect?: Maybe<
    HeightMeasureWhereUniqueInput[] | HeightMeasureWhereUniqueInput
  >;
  set?: Maybe<HeightMeasureWhereUniqueInput[] | HeightMeasureWhereUniqueInput>;
  disconnect?: Maybe<
    HeightMeasureWhereUniqueInput[] | HeightMeasureWhereUniqueInput
  >;
  deleteMany?: Maybe<
    HeightMeasureScalarWhereInput[] | HeightMeasureScalarWhereInput
  >;
  updateMany?: Maybe<
    | HeightMeasureUpdateManyWithWhereNestedInput[]
    | HeightMeasureUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  userId?: Maybe<String>;
  clients?: Maybe<ClientUpdateManyWithoutTrainerInput>;
}

export interface HeightMeasureUpdateWithWhereUniqueNestedInput {
  where: HeightMeasureWhereUniqueInput;
  data: HeightMeasureUpdateDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  userId: String;
  clients?: Maybe<ClientCreateManyWithoutTrainerInput>;
}

export interface HeightMeasureUpdateDataInput {
  unit?: Maybe<UnitUpdateOneRequiredInput>;
  value?: Maybe<Float>;
}

export interface HeightMeasureUpdateManyMutationInput {
  value?: Maybe<Float>;
}

export interface HeightMeasureUpsertWithWhereUniqueNestedInput {
  where: HeightMeasureWhereUniqueInput;
  update: HeightMeasureUpdateDataInput;
  create: HeightMeasureCreateInput;
}

export type WeightMeasureWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HeightMeasureScalarWhereInput {
  value?: Maybe<Float>;
  value_not?: Maybe<Float>;
  value_in?: Maybe<Float[] | Float>;
  value_not_in?: Maybe<Float[] | Float>;
  value_lt?: Maybe<Float>;
  value_lte?: Maybe<Float>;
  value_gt?: Maybe<Float>;
  value_gte?: Maybe<Float>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HeightMeasureScalarWhereInput[] | HeightMeasureScalarWhereInput>;
  OR?: Maybe<HeightMeasureScalarWhereInput[] | HeightMeasureScalarWhereInput>;
  NOT?: Maybe<HeightMeasureScalarWhereInput[] | HeightMeasureScalarWhereInput>;
}

export interface DocumentsCreateManyWithoutClientIdInput {
  create?: Maybe<
    DocumentsCreateWithoutClientIdInput[] | DocumentsCreateWithoutClientIdInput
  >;
  connect?: Maybe<DocumentsWhereUniqueInput[] | DocumentsWhereUniqueInput>;
}

export interface HeightMeasureUpdateManyWithWhereNestedInput {
  where: HeightMeasureScalarWhereInput;
  data: HeightMeasureUpdateManyDataInput;
}

export interface WeightMeasureSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WeightMeasureWhereInput>;
  AND?: Maybe<
    WeightMeasureSubscriptionWhereInput[] | WeightMeasureSubscriptionWhereInput
  >;
  OR?: Maybe<
    WeightMeasureSubscriptionWhereInput[] | WeightMeasureSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WeightMeasureSubscriptionWhereInput[] | WeightMeasureSubscriptionWhereInput
  >;
}

export interface HeightMeasureUpdateManyDataInput {
  value?: Maybe<Float>;
}

export interface BiometricSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BiometricWhereInput>;
  AND?: Maybe<
    BiometricSubscriptionWhereInput[] | BiometricSubscriptionWhereInput
  >;
  OR?: Maybe<
    BiometricSubscriptionWhereInput[] | BiometricSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BiometricSubscriptionWhereInput[] | BiometricSubscriptionWhereInput
  >;
}

export interface ClientUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
}

export type DocumentsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BiometricScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
  OR?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
  NOT?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
}

export type UnitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClientCreateInput {
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  biometrics?: Maybe<BiometricCreateManyWithoutClientIdInput>;
  documents?: Maybe<DocumentsCreateManyWithoutClientIdInput>;
  trainer?: Maybe<UserCreateOneWithoutClientsInput>;
  id?: Maybe<ID_Input>;
}

export interface DocumentsUpdateManyMutationInput {
  title?: Maybe<String>;
  isRequired?: Maybe<Boolean>;
  isSubmitted?: Maybe<Boolean>;
  hasFlag?: Maybe<Boolean>;
  flagMsg?: Maybe<String>;
  path?: Maybe<String>;
}

export interface BiometricCreateManyWithoutClientIdInput {
  create?: Maybe<
    BiometricCreateWithoutClientIdInput[] | BiometricCreateWithoutClientIdInput
  >;
  connect?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
}

export interface ClientCreateOneWithoutBiometricsInput {
  create?: Maybe<ClientCreateWithoutBiometricsInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface BiometricCreateWithoutClientIdInput {
  weights?: Maybe<WeightMeasureCreateManyInput>;
  heights?: Maybe<HeightMeasureCreateManyInput>;
  id?: Maybe<ID_Input>;
}

export interface UnitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UnitWhereInput>;
  AND?: Maybe<UnitSubscriptionWhereInput[] | UnitSubscriptionWhereInput>;
  OR?: Maybe<UnitSubscriptionWhereInput[] | UnitSubscriptionWhereInput>;
  NOT?: Maybe<UnitSubscriptionWhereInput[] | UnitSubscriptionWhereInput>;
}

export interface BiometricUpdateWithoutClientIdDataInput {
  weights?: Maybe<WeightMeasureUpdateManyInput>;
  heights?: Maybe<HeightMeasureUpdateManyInput>;
}

export interface BiometricUpdateWithWhereUniqueWithoutClientIdInput {
  where: BiometricWhereUniqueInput;
  data: BiometricUpdateWithoutClientIdDataInput;
}

export interface BiometricUpdateManyWithoutClientIdInput {
  create?: Maybe<
    BiometricCreateWithoutClientIdInput[] | BiometricCreateWithoutClientIdInput
  >;
  delete?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  connect?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  set?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  disconnect?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  update?: Maybe<
    | BiometricUpdateWithWhereUniqueWithoutClientIdInput[]
    | BiometricUpdateWithWhereUniqueWithoutClientIdInput
  >;
  upsert?: Maybe<
    | BiometricUpsertWithWhereUniqueWithoutClientIdInput[]
    | BiometricUpsertWithWhereUniqueWithoutClientIdInput
  >;
  deleteMany?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
}

export interface ClientUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  biometrics?: Maybe<BiometricUpdateManyWithoutClientIdInput>;
  documents?: Maybe<DocumentsUpdateManyWithoutClientIdInput>;
  trainer?: Maybe<UserUpdateOneWithoutClientsInput>;
}

export type ClientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneWithoutClientsInput {
  create?: Maybe<UserCreateWithoutClientsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ClientUpdateOneWithoutDocumentsInput {
  create?: Maybe<ClientCreateWithoutDocumentsInput>;
  update?: Maybe<ClientUpdateWithoutDocumentsDataInput>;
  upsert?: Maybe<ClientUpsertWithoutDocumentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface UnitUpdateInput {
  brevis?: Maybe<String>;
  name?: Maybe<String>;
}

export type HeightMeasureWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface WeightMeasurePreviousValues {
  value: Float;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WeightMeasurePreviousValuesPromise
  extends Promise<WeightMeasurePreviousValues>,
    Fragmentable {
  value: () => Promise<Float>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WeightMeasurePreviousValuesSubscription
  extends Promise<AsyncIterator<WeightMeasurePreviousValues>>,
    Fragmentable {
  value: () => Promise<AsyncIterator<Float>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UnitPreviousValues {
  brevis: String;
  name: String;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UnitPreviousValuesPromise
  extends Promise<UnitPreviousValues>,
    Fragmentable {
  brevis: () => Promise<String>;
  name: () => Promise<String>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UnitPreviousValuesSubscription
  extends Promise<AsyncIterator<UnitPreviousValues>>,
    Fragmentable {
  brevis: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBiometric {
  count: Int;
}

export interface AggregateBiometricPromise
  extends Promise<AggregateBiometric>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBiometricSubscription
  extends Promise<AsyncIterator<AggregateBiometric>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface Documents {
  title: String;
  isRequired: Boolean;
  isSubmitted: Boolean;
  hasFlag: Boolean;
  flagMsg?: String;
  path?: String;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DocumentsPromise extends Promise<Documents>, Fragmentable {
  clientId: <T = ClientPromise>() => T;
  title: () => Promise<String>;
  isRequired: () => Promise<Boolean>;
  isSubmitted: () => Promise<Boolean>;
  hasFlag: () => Promise<Boolean>;
  flagMsg: () => Promise<String>;
  path: () => Promise<String>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentsSubscription
  extends Promise<AsyncIterator<Documents>>,
    Fragmentable {
  clientId: <T = ClientSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  isRequired: () => Promise<AsyncIterator<Boolean>>;
  isSubmitted: () => Promise<AsyncIterator<Boolean>>;
  hasFlag: () => Promise<AsyncIterator<Boolean>>;
  flagMsg: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DocumentsNullablePromise
  extends Promise<Documents | null>,
    Fragmentable {
  clientId: <T = ClientPromise>() => T;
  title: () => Promise<String>;
  isRequired: () => Promise<Boolean>;
  isSubmitted: () => Promise<Boolean>;
  hasFlag: () => Promise<Boolean>;
  flagMsg: () => Promise<String>;
  path: () => Promise<String>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateWeightMeasure {
  count: Int;
}

export interface AggregateWeightMeasurePromise
  extends Promise<AggregateWeightMeasure>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWeightMeasureSubscription
  extends Promise<AsyncIterator<AggregateWeightMeasure>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BiometricEdge {
  node: Biometric;
  cursor: String;
}

export interface BiometricEdgePromise
  extends Promise<BiometricEdge>,
    Fragmentable {
  node: <T = BiometricPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BiometricEdgeSubscription
  extends Promise<AsyncIterator<BiometricEdge>>,
    Fragmentable {
  node: <T = BiometricSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WeightMeasureConnection {
  pageInfo: PageInfo;
  edges: WeightMeasureEdge[];
}

export interface WeightMeasureConnectionPromise
  extends Promise<WeightMeasureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WeightMeasureEdge>>() => T;
  aggregate: <T = AggregateWeightMeasurePromise>() => T;
}

export interface WeightMeasureConnectionSubscription
  extends Promise<AsyncIterator<WeightMeasureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WeightMeasureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWeightMeasureSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BiometricConnection {
  pageInfo: PageInfo;
  edges: BiometricEdge[];
}

export interface BiometricConnectionPromise
  extends Promise<BiometricConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BiometricEdge>>() => T;
  aggregate: <T = AggregateBiometricPromise>() => T;
}

export interface BiometricConnectionSubscription
  extends Promise<AsyncIterator<BiometricConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BiometricEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBiometricSubscription>() => T;
}

export interface Client {
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeOutput;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  biometrics: <T = FragmentableArray<Biometric>>(args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  documents: <T = FragmentableArray<Documents>>(args?: {
    where?: DocumentsWhereInput;
    orderBy?: DocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trainer: <T = UserPromise>() => T;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  biometrics: <T = Promise<AsyncIterator<BiometricSubscription>>>(args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  documents: <T = Promise<AsyncIterator<DocumentsSubscription>>>(args?: {
    where?: DocumentsWhereInput;
    orderBy?: DocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trainer: <T = UserSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  biometrics: <T = FragmentableArray<Biometric>>(args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  documents: <T = FragmentableArray<Documents>>(args?: {
    where?: DocumentsWhereInput;
    orderBy?: DocumentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trainer: <T = UserPromise>() => T;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Biometric {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BiometricPromise extends Promise<Biometric>, Fragmentable {
  clientId: <T = ClientPromise>() => T;
  weights: <T = FragmentableArray<WeightMeasure>>(args?: {
    where?: WeightMeasureWhereInput;
    orderBy?: WeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  heights: <T = FragmentableArray<HeightMeasure>>(args?: {
    where?: HeightMeasureWhereInput;
    orderBy?: HeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BiometricSubscription
  extends Promise<AsyncIterator<Biometric>>,
    Fragmentable {
  clientId: <T = ClientSubscription>() => T;
  weights: <T = Promise<AsyncIterator<WeightMeasureSubscription>>>(args?: {
    where?: WeightMeasureWhereInput;
    orderBy?: WeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  heights: <T = Promise<AsyncIterator<HeightMeasureSubscription>>>(args?: {
    where?: HeightMeasureWhereInput;
    orderBy?: HeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BiometricNullablePromise
  extends Promise<Biometric | null>,
    Fragmentable {
  clientId: <T = ClientPromise>() => T;
  weights: <T = FragmentableArray<WeightMeasure>>(args?: {
    where?: WeightMeasureWhereInput;
    orderBy?: WeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  heights: <T = FragmentableArray<HeightMeasure>>(args?: {
    where?: HeightMeasureWhereInput;
    orderBy?: HeightMeasureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UnitEdge {
  node: Unit;
  cursor: String;
}

export interface UnitEdgePromise extends Promise<UnitEdge>, Fragmentable {
  node: <T = UnitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UnitEdgeSubscription
  extends Promise<AsyncIterator<UnitEdge>>,
    Fragmentable {
  node: <T = UnitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BiometricSubscriptionPayload {
  mutation: MutationType;
  node: Biometric;
  updatedFields: String[];
  previousValues: BiometricPreviousValues;
}

export interface BiometricSubscriptionPayloadPromise
  extends Promise<BiometricSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BiometricPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BiometricPreviousValuesPromise>() => T;
}

export interface BiometricSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BiometricSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BiometricSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BiometricPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BiometricPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BiometricPreviousValuesPromise
  extends Promise<BiometricPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BiometricPreviousValuesSubscription
  extends Promise<AsyncIterator<BiometricPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HeightMeasureEdge {
  node: HeightMeasure;
  cursor: String;
}

export interface HeightMeasureEdgePromise
  extends Promise<HeightMeasureEdge>,
    Fragmentable {
  node: <T = HeightMeasurePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HeightMeasureEdgeSubscription
  extends Promise<AsyncIterator<HeightMeasureEdge>>,
    Fragmentable {
  node: <T = HeightMeasureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HeightMeasure {
  value: Float;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HeightMeasurePromise
  extends Promise<HeightMeasure>,
    Fragmentable {
  unit: <T = UnitPromise>() => T;
  value: () => Promise<Float>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HeightMeasureSubscription
  extends Promise<AsyncIterator<HeightMeasure>>,
    Fragmentable {
  unit: <T = UnitSubscription>() => T;
  value: () => Promise<AsyncIterator<Float>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HeightMeasureNullablePromise
  extends Promise<HeightMeasure | null>,
    Fragmentable {
  unit: <T = UnitPromise>() => T;
  value: () => Promise<Float>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateDocuments {
  count: Int;
}

export interface AggregateDocumentsPromise
  extends Promise<AggregateDocuments>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDocumentsSubscription
  extends Promise<AsyncIterator<AggregateDocuments>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface DocumentsConnection {
  pageInfo: PageInfo;
  edges: DocumentsEdge[];
}

export interface DocumentsConnectionPromise
  extends Promise<DocumentsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DocumentsEdge>>() => T;
  aggregate: <T = AggregateDocumentsPromise>() => T;
}

export interface DocumentsConnectionSubscription
  extends Promise<AsyncIterator<DocumentsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DocumentsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDocumentsSubscription>() => T;
}

export interface ClientPreviousValues {
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeOutput;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  userId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  userId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  clients: <T = FragmentableArray<Client>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  clients: <T = Promise<AsyncIterator<ClientSubscription>>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  clients: <T = FragmentableArray<Client>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DocumentsSubscriptionPayload {
  mutation: MutationType;
  node: Documents;
  updatedFields: String[];
  previousValues: DocumentsPreviousValues;
}

export interface DocumentsSubscriptionPayloadPromise
  extends Promise<DocumentsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DocumentsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DocumentsPreviousValuesPromise>() => T;
}

export interface DocumentsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DocumentsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DocumentsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DocumentsPreviousValuesSubscription>() => T;
}

export interface AggregateUnit {
  count: Int;
}

export interface AggregateUnitPromise
  extends Promise<AggregateUnit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUnitSubscription
  extends Promise<AsyncIterator<AggregateUnit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DocumentsPreviousValues {
  title: String;
  isRequired: Boolean;
  isSubmitted: Boolean;
  hasFlag: Boolean;
  flagMsg?: String;
  path?: String;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DocumentsPreviousValuesPromise
  extends Promise<DocumentsPreviousValues>,
    Fragmentable {
  title: () => Promise<String>;
  isRequired: () => Promise<Boolean>;
  isSubmitted: () => Promise<Boolean>;
  hasFlag: () => Promise<Boolean>;
  flagMsg: () => Promise<String>;
  path: () => Promise<String>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentsPreviousValuesSubscription
  extends Promise<AsyncIterator<DocumentsPreviousValues>>,
    Fragmentable {
  title: () => Promise<AsyncIterator<String>>;
  isRequired: () => Promise<AsyncIterator<Boolean>>;
  isSubmitted: () => Promise<AsyncIterator<Boolean>>;
  hasFlag: () => Promise<AsyncIterator<Boolean>>;
  flagMsg: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateHeightMeasure {
  count: Int;
}

export interface AggregateHeightMeasurePromise
  extends Promise<AggregateHeightMeasure>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHeightMeasureSubscription
  extends Promise<AsyncIterator<AggregateHeightMeasure>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Unit {
  brevis: String;
  name: String;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UnitPromise extends Promise<Unit>, Fragmentable {
  brevis: () => Promise<String>;
  name: () => Promise<String>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UnitSubscription
  extends Promise<AsyncIterator<Unit>>,
    Fragmentable {
  brevis: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UnitNullablePromise
  extends Promise<Unit | null>,
    Fragmentable {
  brevis: () => Promise<String>;
  name: () => Promise<String>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentsEdge {
  node: Documents;
  cursor: String;
}

export interface DocumentsEdgePromise
  extends Promise<DocumentsEdge>,
    Fragmentable {
  node: <T = DocumentsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DocumentsEdgeSubscription
  extends Promise<AsyncIterator<DocumentsEdge>>,
    Fragmentable {
  node: <T = DocumentsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WeightMeasureEdge {
  node: WeightMeasure;
  cursor: String;
}

export interface WeightMeasureEdgePromise
  extends Promise<WeightMeasureEdge>,
    Fragmentable {
  node: <T = WeightMeasurePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WeightMeasureEdgeSubscription
  extends Promise<AsyncIterator<WeightMeasureEdge>>,
    Fragmentable {
  node: <T = WeightMeasureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UnitSubscriptionPayload {
  mutation: MutationType;
  node: Unit;
  updatedFields: String[];
  previousValues: UnitPreviousValues;
}

export interface UnitSubscriptionPayloadPromise
  extends Promise<UnitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UnitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UnitPreviousValuesPromise>() => T;
}

export interface UnitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UnitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UnitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UnitPreviousValuesSubscription>() => T;
}

export interface WeightMeasure {
  value: Float;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WeightMeasurePromise
  extends Promise<WeightMeasure>,
    Fragmentable {
  unit: <T = UnitPromise>() => T;
  value: () => Promise<Float>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WeightMeasureSubscription
  extends Promise<AsyncIterator<WeightMeasure>>,
    Fragmentable {
  unit: <T = UnitSubscription>() => T;
  value: () => Promise<AsyncIterator<Float>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WeightMeasureNullablePromise
  extends Promise<WeightMeasure | null>,
    Fragmentable {
  unit: <T = UnitPromise>() => T;
  value: () => Promise<Float>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HeightMeasurePreviousValues {
  value: Float;
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HeightMeasurePreviousValuesPromise
  extends Promise<HeightMeasurePreviousValues>,
    Fragmentable {
  value: () => Promise<Float>;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HeightMeasurePreviousValuesSubscription
  extends Promise<AsyncIterator<HeightMeasurePreviousValues>>,
    Fragmentable {
  value: () => Promise<AsyncIterator<Float>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HeightMeasureSubscriptionPayload {
  mutation: MutationType;
  node: HeightMeasure;
  updatedFields: String[];
  previousValues: HeightMeasurePreviousValues;
}

export interface HeightMeasureSubscriptionPayloadPromise
  extends Promise<HeightMeasureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HeightMeasurePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HeightMeasurePreviousValuesPromise>() => T;
}

export interface HeightMeasureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HeightMeasureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HeightMeasureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HeightMeasurePreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface WeightMeasureSubscriptionPayload {
  mutation: MutationType;
  node: WeightMeasure;
  updatedFields: String[];
  previousValues: WeightMeasurePreviousValues;
}

export interface WeightMeasureSubscriptionPayloadPromise
  extends Promise<WeightMeasureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WeightMeasurePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WeightMeasurePreviousValuesPromise>() => T;
}

export interface WeightMeasureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WeightMeasureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WeightMeasureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WeightMeasurePreviousValuesSubscription>() => T;
}

export interface HeightMeasureConnection {
  pageInfo: PageInfo;
  edges: HeightMeasureEdge[];
}

export interface HeightMeasureConnectionPromise
  extends Promise<HeightMeasureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HeightMeasureEdge>>() => T;
  aggregate: <T = AggregateHeightMeasurePromise>() => T;
}

export interface HeightMeasureConnectionSubscription
  extends Promise<AsyncIterator<HeightMeasureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HeightMeasureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHeightMeasureSubscription>() => T;
}

export interface UnitConnection {
  pageInfo: PageInfo;
  edges: UnitEdge[];
}

export interface UnitConnectionPromise
  extends Promise<UnitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UnitEdge>>() => T;
  aggregate: <T = AggregateUnitPromise>() => T;
}

export interface UnitConnectionSubscription
  extends Promise<AsyncIterator<UnitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UnitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUnitSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Client",
    embedded: false
  },
  {
    name: "Biometric",
    embedded: false
  },
  {
    name: "WeightMeasure",
    embedded: false
  },
  {
    name: "HeightMeasure",
    embedded: false
  },
  {
    name: "Unit",
    embedded: false
  },
  {
    name: "Documents",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
