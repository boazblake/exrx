// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBiometric {
  count: Int!
}

type AggregateClient {
  count: Int!
}

type AggregateDocuments {
  count: Int!
}

type AggregateHeightMeasure {
  count: Int!
}

type AggregateUnit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeightMeasure {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Biometric {
  clientId: Client
  weights(where: WeightMeasureWhereInput, orderBy: WeightMeasureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeightMeasure!]
  heights(where: HeightMeasureWhereInput, orderBy: HeightMeasureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HeightMeasure!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BiometricConnection {
  pageInfo: PageInfo!
  edges: [BiometricEdge]!
  aggregate: AggregateBiometric!
}

input BiometricCreateInput {
  clientId: ClientCreateOneWithoutBiometricsInput
  weights: WeightMeasureCreateManyInput
  heights: HeightMeasureCreateManyInput
  id: ID
}

input BiometricCreateManyWithoutClientIdInput {
  create: [BiometricCreateWithoutClientIdInput!]
  connect: [BiometricWhereUniqueInput!]
}

input BiometricCreateWithoutClientIdInput {
  weights: WeightMeasureCreateManyInput
  heights: HeightMeasureCreateManyInput
  id: ID
}

type BiometricEdge {
  node: Biometric!
  cursor: String!
}

enum BiometricOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BiometricPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BiometricScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BiometricScalarWhereInput!]
  OR: [BiometricScalarWhereInput!]
  NOT: [BiometricScalarWhereInput!]
}

type BiometricSubscriptionPayload {
  mutation: MutationType!
  node: Biometric
  updatedFields: [String!]
  previousValues: BiometricPreviousValues
}

input BiometricSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BiometricWhereInput
  AND: [BiometricSubscriptionWhereInput!]
  OR: [BiometricSubscriptionWhereInput!]
  NOT: [BiometricSubscriptionWhereInput!]
}

input BiometricUpdateInput {
  clientId: ClientUpdateOneWithoutBiometricsInput
  weights: WeightMeasureUpdateManyInput
  heights: HeightMeasureUpdateManyInput
}

input BiometricUpdateManyWithoutClientIdInput {
  create: [BiometricCreateWithoutClientIdInput!]
  delete: [BiometricWhereUniqueInput!]
  connect: [BiometricWhereUniqueInput!]
  set: [BiometricWhereUniqueInput!]
  disconnect: [BiometricWhereUniqueInput!]
  update: [BiometricUpdateWithWhereUniqueWithoutClientIdInput!]
  upsert: [BiometricUpsertWithWhereUniqueWithoutClientIdInput!]
  deleteMany: [BiometricScalarWhereInput!]
}

input BiometricUpdateWithoutClientIdDataInput {
  weights: WeightMeasureUpdateManyInput
  heights: HeightMeasureUpdateManyInput
}

input BiometricUpdateWithWhereUniqueWithoutClientIdInput {
  where: BiometricWhereUniqueInput!
  data: BiometricUpdateWithoutClientIdDataInput!
}

input BiometricUpsertWithWhereUniqueWithoutClientIdInput {
  where: BiometricWhereUniqueInput!
  update: BiometricUpdateWithoutClientIdDataInput!
  create: BiometricCreateWithoutClientIdInput!
}

input BiometricWhereInput {
  clientId: ClientWhereInput
  weights_every: WeightMeasureWhereInput
  weights_some: WeightMeasureWhereInput
  weights_none: WeightMeasureWhereInput
  heights_every: HeightMeasureWhereInput
  heights_some: HeightMeasureWhereInput
  heights_none: HeightMeasureWhereInput
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BiometricWhereInput!]
  OR: [BiometricWhereInput!]
  NOT: [BiometricWhereInput!]
}

input BiometricWhereUniqueInput {
  id: ID
}

type Client {
  firstname: String!
  lastname: String!
  email: String!
  birthdate: DateTime!
  biometrics(where: BiometricWhereInput, orderBy: BiometricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Biometric!]
  documents(where: DocumentsWhereInput, orderBy: DocumentsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Documents!]
  trainer: User
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClientConnection {
  pageInfo: PageInfo!
  edges: [ClientEdge]!
  aggregate: AggregateClient!
}

input ClientCreateInput {
  firstname: String!
  lastname: String!
  email: String!
  birthdate: DateTime!
  biometrics: BiometricCreateManyWithoutClientIdInput
  documents: DocumentsCreateManyWithoutClientIdInput
  trainer: UserCreateOneWithoutClientsInput
  id: ID
}

input ClientCreateManyWithoutTrainerInput {
  create: [ClientCreateWithoutTrainerInput!]
  connect: [ClientWhereUniqueInput!]
}

input ClientCreateOneWithoutBiometricsInput {
  create: ClientCreateWithoutBiometricsInput
  connect: ClientWhereUniqueInput
}

input ClientCreateOneWithoutDocumentsInput {
  create: ClientCreateWithoutDocumentsInput
  connect: ClientWhereUniqueInput
}

input ClientCreateWithoutBiometricsInput {
  firstname: String!
  lastname: String!
  email: String!
  birthdate: DateTime!
  documents: DocumentsCreateManyWithoutClientIdInput
  trainer: UserCreateOneWithoutClientsInput
  id: ID
}

input ClientCreateWithoutDocumentsInput {
  firstname: String!
  lastname: String!
  email: String!
  birthdate: DateTime!
  biometrics: BiometricCreateManyWithoutClientIdInput
  trainer: UserCreateOneWithoutClientsInput
  id: ID
}

input ClientCreateWithoutTrainerInput {
  firstname: String!
  lastname: String!
  email: String!
  birthdate: DateTime!
  biometrics: BiometricCreateManyWithoutClientIdInput
  documents: DocumentsCreateManyWithoutClientIdInput
  id: ID
}

type ClientEdge {
  node: Client!
  cursor: String!
}

enum ClientOrderByInput {
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  birthdate_ASC
  birthdate_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClientPreviousValues {
  firstname: String!
  lastname: String!
  email: String!
  birthdate: DateTime!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClientScalarWhereInput {
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ClientScalarWhereInput!]
  OR: [ClientScalarWhereInput!]
  NOT: [ClientScalarWhereInput!]
}

type ClientSubscriptionPayload {
  mutation: MutationType!
  node: Client
  updatedFields: [String!]
  previousValues: ClientPreviousValues
}

input ClientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClientWhereInput
  AND: [ClientSubscriptionWhereInput!]
  OR: [ClientSubscriptionWhereInput!]
  NOT: [ClientSubscriptionWhereInput!]
}

input ClientUpdateInput {
  firstname: String
  lastname: String
  email: String
  birthdate: DateTime
  biometrics: BiometricUpdateManyWithoutClientIdInput
  documents: DocumentsUpdateManyWithoutClientIdInput
  trainer: UserUpdateOneWithoutClientsInput
}

input ClientUpdateManyDataInput {
  firstname: String
  lastname: String
  email: String
  birthdate: DateTime
}

input ClientUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  birthdate: DateTime
}

input ClientUpdateManyWithoutTrainerInput {
  create: [ClientCreateWithoutTrainerInput!]
  delete: [ClientWhereUniqueInput!]
  connect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  disconnect: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueWithoutTrainerInput!]
  upsert: [ClientUpsertWithWhereUniqueWithoutTrainerInput!]
  deleteMany: [ClientScalarWhereInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
}

input ClientUpdateManyWithWhereNestedInput {
  where: ClientScalarWhereInput!
  data: ClientUpdateManyDataInput!
}

input ClientUpdateOneWithoutBiometricsInput {
  create: ClientCreateWithoutBiometricsInput
  update: ClientUpdateWithoutBiometricsDataInput
  upsert: ClientUpsertWithoutBiometricsInput
  delete: Boolean
  disconnect: Boolean
  connect: ClientWhereUniqueInput
}

input ClientUpdateOneWithoutDocumentsInput {
  create: ClientCreateWithoutDocumentsInput
  update: ClientUpdateWithoutDocumentsDataInput
  upsert: ClientUpsertWithoutDocumentsInput
  delete: Boolean
  disconnect: Boolean
  connect: ClientWhereUniqueInput
}

input ClientUpdateWithoutBiometricsDataInput {
  firstname: String
  lastname: String
  email: String
  birthdate: DateTime
  documents: DocumentsUpdateManyWithoutClientIdInput
  trainer: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutDocumentsDataInput {
  firstname: String
  lastname: String
  email: String
  birthdate: DateTime
  biometrics: BiometricUpdateManyWithoutClientIdInput
  trainer: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutTrainerDataInput {
  firstname: String
  lastname: String
  email: String
  birthdate: DateTime
  biometrics: BiometricUpdateManyWithoutClientIdInput
  documents: DocumentsUpdateManyWithoutClientIdInput
}

input ClientUpdateWithWhereUniqueWithoutTrainerInput {
  where: ClientWhereUniqueInput!
  data: ClientUpdateWithoutTrainerDataInput!
}

input ClientUpsertWithoutBiometricsInput {
  update: ClientUpdateWithoutBiometricsDataInput!
  create: ClientCreateWithoutBiometricsInput!
}

input ClientUpsertWithoutDocumentsInput {
  update: ClientUpdateWithoutDocumentsDataInput!
  create: ClientCreateWithoutDocumentsInput!
}

input ClientUpsertWithWhereUniqueWithoutTrainerInput {
  where: ClientWhereUniqueInput!
  update: ClientUpdateWithoutTrainerDataInput!
  create: ClientCreateWithoutTrainerInput!
}

input ClientWhereInput {
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  biometrics_every: BiometricWhereInput
  biometrics_some: BiometricWhereInput
  biometrics_none: BiometricWhereInput
  documents_every: DocumentsWhereInput
  documents_some: DocumentsWhereInput
  documents_none: DocumentsWhereInput
  trainer: UserWhereInput
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
}

input ClientWhereUniqueInput {
  id: ID
}

scalar DateTime

type Documents {
  clientId: Client
  title: String!
  isRequired: Boolean!
  isSubmitted: Boolean!
  hasFlag: Boolean!
  flagMsg: String
  path: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DocumentsConnection {
  pageInfo: PageInfo!
  edges: [DocumentsEdge]!
  aggregate: AggregateDocuments!
}

input DocumentsCreateInput {
  clientId: ClientCreateOneWithoutDocumentsInput
  title: String!
  isRequired: Boolean!
  isSubmitted: Boolean!
  hasFlag: Boolean!
  flagMsg: String
  path: String
  id: ID
}

input DocumentsCreateManyWithoutClientIdInput {
  create: [DocumentsCreateWithoutClientIdInput!]
  connect: [DocumentsWhereUniqueInput!]
}

input DocumentsCreateWithoutClientIdInput {
  title: String!
  isRequired: Boolean!
  isSubmitted: Boolean!
  hasFlag: Boolean!
  flagMsg: String
  path: String
  id: ID
}

type DocumentsEdge {
  node: Documents!
  cursor: String!
}

enum DocumentsOrderByInput {
  title_ASC
  title_DESC
  isRequired_ASC
  isRequired_DESC
  isSubmitted_ASC
  isSubmitted_DESC
  hasFlag_ASC
  hasFlag_DESC
  flagMsg_ASC
  flagMsg_DESC
  path_ASC
  path_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DocumentsPreviousValues {
  title: String!
  isRequired: Boolean!
  isSubmitted: Boolean!
  hasFlag: Boolean!
  flagMsg: String
  path: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DocumentsScalarWhereInput {
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  isRequired: Boolean
  isRequired_not: Boolean
  isSubmitted: Boolean
  isSubmitted_not: Boolean
  hasFlag: Boolean
  hasFlag_not: Boolean
  flagMsg: String
  flagMsg_not: String
  flagMsg_in: [String!]
  flagMsg_not_in: [String!]
  flagMsg_lt: String
  flagMsg_lte: String
  flagMsg_gt: String
  flagMsg_gte: String
  flagMsg_contains: String
  flagMsg_not_contains: String
  flagMsg_starts_with: String
  flagMsg_not_starts_with: String
  flagMsg_ends_with: String
  flagMsg_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DocumentsScalarWhereInput!]
  OR: [DocumentsScalarWhereInput!]
  NOT: [DocumentsScalarWhereInput!]
}

type DocumentsSubscriptionPayload {
  mutation: MutationType!
  node: Documents
  updatedFields: [String!]
  previousValues: DocumentsPreviousValues
}

input DocumentsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DocumentsWhereInput
  AND: [DocumentsSubscriptionWhereInput!]
  OR: [DocumentsSubscriptionWhereInput!]
  NOT: [DocumentsSubscriptionWhereInput!]
}

input DocumentsUpdateInput {
  clientId: ClientUpdateOneWithoutDocumentsInput
  title: String
  isRequired: Boolean
  isSubmitted: Boolean
  hasFlag: Boolean
  flagMsg: String
  path: String
}

input DocumentsUpdateManyDataInput {
  title: String
  isRequired: Boolean
  isSubmitted: Boolean
  hasFlag: Boolean
  flagMsg: String
  path: String
}

input DocumentsUpdateManyMutationInput {
  title: String
  isRequired: Boolean
  isSubmitted: Boolean
  hasFlag: Boolean
  flagMsg: String
  path: String
}

input DocumentsUpdateManyWithoutClientIdInput {
  create: [DocumentsCreateWithoutClientIdInput!]
  delete: [DocumentsWhereUniqueInput!]
  connect: [DocumentsWhereUniqueInput!]
  set: [DocumentsWhereUniqueInput!]
  disconnect: [DocumentsWhereUniqueInput!]
  update: [DocumentsUpdateWithWhereUniqueWithoutClientIdInput!]
  upsert: [DocumentsUpsertWithWhereUniqueWithoutClientIdInput!]
  deleteMany: [DocumentsScalarWhereInput!]
  updateMany: [DocumentsUpdateManyWithWhereNestedInput!]
}

input DocumentsUpdateManyWithWhereNestedInput {
  where: DocumentsScalarWhereInput!
  data: DocumentsUpdateManyDataInput!
}

input DocumentsUpdateWithoutClientIdDataInput {
  title: String
  isRequired: Boolean
  isSubmitted: Boolean
  hasFlag: Boolean
  flagMsg: String
  path: String
}

input DocumentsUpdateWithWhereUniqueWithoutClientIdInput {
  where: DocumentsWhereUniqueInput!
  data: DocumentsUpdateWithoutClientIdDataInput!
}

input DocumentsUpsertWithWhereUniqueWithoutClientIdInput {
  where: DocumentsWhereUniqueInput!
  update: DocumentsUpdateWithoutClientIdDataInput!
  create: DocumentsCreateWithoutClientIdInput!
}

input DocumentsWhereInput {
  clientId: ClientWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  isRequired: Boolean
  isRequired_not: Boolean
  isSubmitted: Boolean
  isSubmitted_not: Boolean
  hasFlag: Boolean
  hasFlag_not: Boolean
  flagMsg: String
  flagMsg_not: String
  flagMsg_in: [String!]
  flagMsg_not_in: [String!]
  flagMsg_lt: String
  flagMsg_lte: String
  flagMsg_gt: String
  flagMsg_gte: String
  flagMsg_contains: String
  flagMsg_not_contains: String
  flagMsg_starts_with: String
  flagMsg_not_starts_with: String
  flagMsg_ends_with: String
  flagMsg_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DocumentsWhereInput!]
  OR: [DocumentsWhereInput!]
  NOT: [DocumentsWhereInput!]
}

input DocumentsWhereUniqueInput {
  id: ID
}

type HeightMeasure {
  unit: Unit!
  value: Float!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HeightMeasureConnection {
  pageInfo: PageInfo!
  edges: [HeightMeasureEdge]!
  aggregate: AggregateHeightMeasure!
}

input HeightMeasureCreateInput {
  unit: UnitCreateOneInput!
  value: Float!
  id: ID
}

input HeightMeasureCreateManyInput {
  create: [HeightMeasureCreateInput!]
  connect: [HeightMeasureWhereUniqueInput!]
}

type HeightMeasureEdge {
  node: HeightMeasure!
  cursor: String!
}

enum HeightMeasureOrderByInput {
  value_ASC
  value_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HeightMeasurePreviousValues {
  value: Float!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input HeightMeasureScalarWhereInput {
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HeightMeasureScalarWhereInput!]
  OR: [HeightMeasureScalarWhereInput!]
  NOT: [HeightMeasureScalarWhereInput!]
}

type HeightMeasureSubscriptionPayload {
  mutation: MutationType!
  node: HeightMeasure
  updatedFields: [String!]
  previousValues: HeightMeasurePreviousValues
}

input HeightMeasureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeightMeasureWhereInput
  AND: [HeightMeasureSubscriptionWhereInput!]
  OR: [HeightMeasureSubscriptionWhereInput!]
  NOT: [HeightMeasureSubscriptionWhereInput!]
}

input HeightMeasureUpdateDataInput {
  unit: UnitUpdateOneRequiredInput
  value: Float
}

input HeightMeasureUpdateInput {
  unit: UnitUpdateOneRequiredInput
  value: Float
}

input HeightMeasureUpdateManyDataInput {
  value: Float
}

input HeightMeasureUpdateManyInput {
  create: [HeightMeasureCreateInput!]
  update: [HeightMeasureUpdateWithWhereUniqueNestedInput!]
  upsert: [HeightMeasureUpsertWithWhereUniqueNestedInput!]
  delete: [HeightMeasureWhereUniqueInput!]
  connect: [HeightMeasureWhereUniqueInput!]
  set: [HeightMeasureWhereUniqueInput!]
  disconnect: [HeightMeasureWhereUniqueInput!]
  deleteMany: [HeightMeasureScalarWhereInput!]
  updateMany: [HeightMeasureUpdateManyWithWhereNestedInput!]
}

input HeightMeasureUpdateManyMutationInput {
  value: Float
}

input HeightMeasureUpdateManyWithWhereNestedInput {
  where: HeightMeasureScalarWhereInput!
  data: HeightMeasureUpdateManyDataInput!
}

input HeightMeasureUpdateWithWhereUniqueNestedInput {
  where: HeightMeasureWhereUniqueInput!
  data: HeightMeasureUpdateDataInput!
}

input HeightMeasureUpsertWithWhereUniqueNestedInput {
  where: HeightMeasureWhereUniqueInput!
  update: HeightMeasureUpdateDataInput!
  create: HeightMeasureCreateInput!
}

input HeightMeasureWhereInput {
  unit: UnitWhereInput
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [HeightMeasureWhereInput!]
  OR: [HeightMeasureWhereInput!]
  NOT: [HeightMeasureWhereInput!]
}

input HeightMeasureWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBiometric(data: BiometricCreateInput!): Biometric!
  updateBiometric(data: BiometricUpdateInput!, where: BiometricWhereUniqueInput!): Biometric
  upsertBiometric(where: BiometricWhereUniqueInput!, create: BiometricCreateInput!, update: BiometricUpdateInput!): Biometric!
  deleteBiometric(where: BiometricWhereUniqueInput!): Biometric
  deleteManyBiometrics(where: BiometricWhereInput): BatchPayload!
  createClient(data: ClientCreateInput!): Client!
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateManyClients(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  upsertClient(where: ClientWhereUniqueInput!, create: ClientCreateInput!, update: ClientUpdateInput!): Client!
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteManyClients(where: ClientWhereInput): BatchPayload!
  createDocuments(data: DocumentsCreateInput!): Documents!
  updateDocuments(data: DocumentsUpdateInput!, where: DocumentsWhereUniqueInput!): Documents
  updateManyDocumentses(data: DocumentsUpdateManyMutationInput!, where: DocumentsWhereInput): BatchPayload!
  upsertDocuments(where: DocumentsWhereUniqueInput!, create: DocumentsCreateInput!, update: DocumentsUpdateInput!): Documents!
  deleteDocuments(where: DocumentsWhereUniqueInput!): Documents
  deleteManyDocumentses(where: DocumentsWhereInput): BatchPayload!
  createHeightMeasure(data: HeightMeasureCreateInput!): HeightMeasure!
  updateHeightMeasure(data: HeightMeasureUpdateInput!, where: HeightMeasureWhereUniqueInput!): HeightMeasure
  updateManyHeightMeasures(data: HeightMeasureUpdateManyMutationInput!, where: HeightMeasureWhereInput): BatchPayload!
  upsertHeightMeasure(where: HeightMeasureWhereUniqueInput!, create: HeightMeasureCreateInput!, update: HeightMeasureUpdateInput!): HeightMeasure!
  deleteHeightMeasure(where: HeightMeasureWhereUniqueInput!): HeightMeasure
  deleteManyHeightMeasures(where: HeightMeasureWhereInput): BatchPayload!
  createUnit(data: UnitCreateInput!): Unit!
  updateUnit(data: UnitUpdateInput!, where: UnitWhereUniqueInput!): Unit
  updateManyUnits(data: UnitUpdateManyMutationInput!, where: UnitWhereInput): BatchPayload!
  upsertUnit(where: UnitWhereUniqueInput!, create: UnitCreateInput!, update: UnitUpdateInput!): Unit!
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteManyUnits(where: UnitWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWeightMeasure(data: WeightMeasureCreateInput!): WeightMeasure!
  updateWeightMeasure(data: WeightMeasureUpdateInput!, where: WeightMeasureWhereUniqueInput!): WeightMeasure
  updateManyWeightMeasures(data: WeightMeasureUpdateManyMutationInput!, where: WeightMeasureWhereInput): BatchPayload!
  upsertWeightMeasure(where: WeightMeasureWhereUniqueInput!, create: WeightMeasureCreateInput!, update: WeightMeasureUpdateInput!): WeightMeasure!
  deleteWeightMeasure(where: WeightMeasureWhereUniqueInput!): WeightMeasure
  deleteManyWeightMeasures(where: WeightMeasureWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  biometric(where: BiometricWhereUniqueInput!): Biometric
  biometrics(where: BiometricWhereInput, orderBy: BiometricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Biometric]!
  biometricsConnection(where: BiometricWhereInput, orderBy: BiometricOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BiometricConnection!
  client(where: ClientWhereUniqueInput!): Client
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client]!
  clientsConnection(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientConnection!
  documents(where: DocumentsWhereUniqueInput!): Documents
  documentses(where: DocumentsWhereInput, orderBy: DocumentsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Documents]!
  documentsesConnection(where: DocumentsWhereInput, orderBy: DocumentsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentsConnection!
  heightMeasure(where: HeightMeasureWhereUniqueInput!): HeightMeasure
  heightMeasures(where: HeightMeasureWhereInput, orderBy: HeightMeasureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HeightMeasure]!
  heightMeasuresConnection(where: HeightMeasureWhereInput, orderBy: HeightMeasureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeightMeasureConnection!
  unit(where: UnitWhereUniqueInput!): Unit
  units(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit]!
  unitsConnection(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  weightMeasure(where: WeightMeasureWhereUniqueInput!): WeightMeasure
  weightMeasures(where: WeightMeasureWhereInput, orderBy: WeightMeasureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeightMeasure]!
  weightMeasuresConnection(where: WeightMeasureWhereInput, orderBy: WeightMeasureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeightMeasureConnection!
  node(id: ID!): Node
}

type Subscription {
  biometric(where: BiometricSubscriptionWhereInput): BiometricSubscriptionPayload
  client(where: ClientSubscriptionWhereInput): ClientSubscriptionPayload
  documents(where: DocumentsSubscriptionWhereInput): DocumentsSubscriptionPayload
  heightMeasure(where: HeightMeasureSubscriptionWhereInput): HeightMeasureSubscriptionPayload
  unit(where: UnitSubscriptionWhereInput): UnitSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  weightMeasure(where: WeightMeasureSubscriptionWhereInput): WeightMeasureSubscriptionPayload
}

type Unit {
  brevis: String!
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UnitConnection {
  pageInfo: PageInfo!
  edges: [UnitEdge]!
  aggregate: AggregateUnit!
}

input UnitCreateInput {
  brevis: String!
  name: String!
  id: ID
}

input UnitCreateOneInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
}

type UnitEdge {
  node: Unit!
  cursor: String!
}

enum UnitOrderByInput {
  brevis_ASC
  brevis_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UnitPreviousValues {
  brevis: String!
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UnitSubscriptionPayload {
  mutation: MutationType!
  node: Unit
  updatedFields: [String!]
  previousValues: UnitPreviousValues
}

input UnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UnitWhereInput
  AND: [UnitSubscriptionWhereInput!]
  OR: [UnitSubscriptionWhereInput!]
  NOT: [UnitSubscriptionWhereInput!]
}

input UnitUpdateDataInput {
  brevis: String
  name: String
}

input UnitUpdateInput {
  brevis: String
  name: String
}

input UnitUpdateManyMutationInput {
  brevis: String
  name: String
}

input UnitUpdateOneRequiredInput {
  create: UnitCreateInput
  update: UnitUpdateDataInput
  upsert: UnitUpsertNestedInput
  connect: UnitWhereUniqueInput
}

input UnitUpsertNestedInput {
  update: UnitUpdateDataInput!
  create: UnitCreateInput!
}

input UnitWhereInput {
  brevis: String
  brevis_not: String
  brevis_in: [String!]
  brevis_not_in: [String!]
  brevis_lt: String
  brevis_lte: String
  brevis_gt: String
  brevis_gte: String
  brevis_contains: String
  brevis_not_contains: String
  brevis_starts_with: String
  brevis_not_starts_with: String
  brevis_ends_with: String
  brevis_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
}

input UnitWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  userId: String!
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userId: String!
  clients: ClientCreateManyWithoutTrainerInput
}

input UserCreateOneWithoutClientsInput {
  create: UserCreateWithoutClientsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClientsInput {
  id: ID
  userId: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  userId: String
  clients: ClientUpdateManyWithoutTrainerInput
}

input UserUpdateManyMutationInput {
  userId: String
}

input UserUpdateOneWithoutClientsInput {
  create: UserCreateWithoutClientsInput
  update: UserUpdateWithoutClientsDataInput
  upsert: UserUpsertWithoutClientsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutClientsDataInput {
  userId: String
}

input UserUpsertWithoutClientsInput {
  update: UserUpdateWithoutClientsDataInput!
  create: UserCreateWithoutClientsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  clients_every: ClientWhereInput
  clients_some: ClientWhereInput
  clients_none: ClientWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  userId: String
}

type WeightMeasure {
  unit: Unit!
  value: Float!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WeightMeasureConnection {
  pageInfo: PageInfo!
  edges: [WeightMeasureEdge]!
  aggregate: AggregateWeightMeasure!
}

input WeightMeasureCreateInput {
  unit: UnitCreateOneInput!
  value: Float!
  id: ID
}

input WeightMeasureCreateManyInput {
  create: [WeightMeasureCreateInput!]
  connect: [WeightMeasureWhereUniqueInput!]
}

type WeightMeasureEdge {
  node: WeightMeasure!
  cursor: String!
}

enum WeightMeasureOrderByInput {
  value_ASC
  value_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WeightMeasurePreviousValues {
  value: Float!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WeightMeasureScalarWhereInput {
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WeightMeasureScalarWhereInput!]
  OR: [WeightMeasureScalarWhereInput!]
  NOT: [WeightMeasureScalarWhereInput!]
}

type WeightMeasureSubscriptionPayload {
  mutation: MutationType!
  node: WeightMeasure
  updatedFields: [String!]
  previousValues: WeightMeasurePreviousValues
}

input WeightMeasureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WeightMeasureWhereInput
  AND: [WeightMeasureSubscriptionWhereInput!]
  OR: [WeightMeasureSubscriptionWhereInput!]
  NOT: [WeightMeasureSubscriptionWhereInput!]
}

input WeightMeasureUpdateDataInput {
  unit: UnitUpdateOneRequiredInput
  value: Float
}

input WeightMeasureUpdateInput {
  unit: UnitUpdateOneRequiredInput
  value: Float
}

input WeightMeasureUpdateManyDataInput {
  value: Float
}

input WeightMeasureUpdateManyInput {
  create: [WeightMeasureCreateInput!]
  update: [WeightMeasureUpdateWithWhereUniqueNestedInput!]
  upsert: [WeightMeasureUpsertWithWhereUniqueNestedInput!]
  delete: [WeightMeasureWhereUniqueInput!]
  connect: [WeightMeasureWhereUniqueInput!]
  set: [WeightMeasureWhereUniqueInput!]
  disconnect: [WeightMeasureWhereUniqueInput!]
  deleteMany: [WeightMeasureScalarWhereInput!]
  updateMany: [WeightMeasureUpdateManyWithWhereNestedInput!]
}

input WeightMeasureUpdateManyMutationInput {
  value: Float
}

input WeightMeasureUpdateManyWithWhereNestedInput {
  where: WeightMeasureScalarWhereInput!
  data: WeightMeasureUpdateManyDataInput!
}

input WeightMeasureUpdateWithWhereUniqueNestedInput {
  where: WeightMeasureWhereUniqueInput!
  data: WeightMeasureUpdateDataInput!
}

input WeightMeasureUpsertWithWhereUniqueNestedInput {
  where: WeightMeasureWhereUniqueInput!
  update: WeightMeasureUpdateDataInput!
  create: WeightMeasureCreateInput!
}

input WeightMeasureWhereInput {
  unit: UnitWhereInput
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WeightMeasureWhereInput!]
  OR: [WeightMeasureWhereInput!]
  NOT: [WeightMeasureWhereInput!]
}

input WeightMeasureWhereUniqueInput {
  id: ID
}
`