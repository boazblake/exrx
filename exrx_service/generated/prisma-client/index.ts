// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  biometric: (where?: BiometricWhereInput) => Promise<boolean>;
  client: (where?: ClientWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  biometric: (where: BiometricWhereUniqueInput) => BiometricNullablePromise;
  biometrics: (args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Biometric>;
  biometricsConnection: (args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BiometricConnectionPromise;
  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBiometric: (data: BiometricCreateInput) => BiometricPromise;
  updateBiometric: (args: {
    data: BiometricUpdateInput;
    where: BiometricWhereUniqueInput;
  }) => BiometricPromise;
  updateManyBiometrics: (args: {
    data: BiometricUpdateManyMutationInput;
    where?: BiometricWhereInput;
  }) => BatchPayloadPromise;
  upsertBiometric: (args: {
    where: BiometricWhereUniqueInput;
    create: BiometricCreateInput;
    update: BiometricUpdateInput;
  }) => BiometricPromise;
  deleteBiometric: (where: BiometricWhereUniqueInput) => BiometricPromise;
  deleteManyBiometrics: (where?: BiometricWhereInput) => BatchPayloadPromise;
  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  biometric: (
    where?: BiometricSubscriptionWhereInput
  ) => BiometricSubscriptionPayloadSubscription;
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BiometricOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "height_ASC"
  | "height_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ClientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutClientsInput {
  create?: Maybe<UserCreateWithoutClientsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type BiometricWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BiometricUpdateWithoutClientIdDataInput {
  weight?: Maybe<Float>;
  height?: Maybe<Float>;
}

export interface BiometricWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  clientId?: Maybe<ClientWhereInput>;
  weight?: Maybe<Float>;
  weight_not?: Maybe<Float>;
  weight_in?: Maybe<Float[] | Float>;
  weight_not_in?: Maybe<Float[] | Float>;
  weight_lt?: Maybe<Float>;
  weight_lte?: Maybe<Float>;
  weight_gt?: Maybe<Float>;
  weight_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BiometricWhereInput[] | BiometricWhereInput>;
  OR?: Maybe<BiometricWhereInput[] | BiometricWhereInput>;
  NOT?: Maybe<BiometricWhereInput[] | BiometricWhereInput>;
}

export interface BiometricCreateInput {
  id?: Maybe<ID_Input>;
  clientId?: Maybe<ClientCreateOneWithoutBiometricsInput>;
  weight?: Maybe<Float>;
  height?: Maybe<Float>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ClientCreateOneWithoutBiometricsInput {
  create?: Maybe<ClientCreateWithoutBiometricsInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface BiometricSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BiometricWhereInput>;
  AND?: Maybe<
    BiometricSubscriptionWhereInput[] | BiometricSubscriptionWhereInput
  >;
  OR?: Maybe<
    BiometricSubscriptionWhereInput[] | BiometricSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BiometricSubscriptionWhereInput[] | BiometricSubscriptionWhereInput
  >;
}

export interface ClientCreateWithoutBiometricsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  trainerId?: Maybe<UserCreateOneWithoutClientsInput>;
}

export interface ClientUpdateManyWithWhereNestedInput {
  where: ClientScalarWhereInput;
  data: ClientUpdateManyDataInput;
}

export interface UserCreateOneWithoutClientsInput {
  create?: Maybe<UserCreateWithoutClientsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ClientUpsertWithWhereUniqueWithoutTrainerIdInput {
  where: ClientWhereUniqueInput;
  update: ClientUpdateWithoutTrainerIdDataInput;
  create: ClientCreateWithoutTrainerIdInput;
}

export interface UserCreateWithoutClientsInput {
  id?: Maybe<ID_Input>;
}

export interface ClientUpdateWithWhereUniqueWithoutTrainerIdInput {
  where: ClientWhereUniqueInput;
  data: ClientUpdateWithoutTrainerIdDataInput;
}

export interface BiometricUpdateInput {
  clientId?: Maybe<ClientUpdateOneWithoutBiometricsInput>;
  weight?: Maybe<Float>;
  height?: Maybe<Float>;
}

export type ClientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClientUpdateOneWithoutBiometricsInput {
  create?: Maybe<ClientCreateWithoutBiometricsInput>;
  update?: Maybe<ClientUpdateWithoutBiometricsDataInput>;
  upsert?: Maybe<ClientUpsertWithoutBiometricsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientCreateWithoutTrainerIdInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  biometrics?: Maybe<BiometricCreateManyWithoutClientIdInput>;
}

export interface ClientUpdateWithoutBiometricsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  trainerId?: Maybe<UserUpdateOneWithoutClientsInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BiometricScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  weight?: Maybe<Float>;
  weight_not?: Maybe<Float>;
  weight_in?: Maybe<Float[] | Float>;
  weight_not_in?: Maybe<Float[] | Float>;
  weight_lt?: Maybe<Float>;
  weight_lte?: Maybe<Float>;
  weight_gt?: Maybe<Float>;
  weight_gte?: Maybe<Float>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
  OR?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
  NOT?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
}

export interface ClientUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
}

export interface ClientUpsertWithoutBiometricsInput {
  update: ClientUpdateWithoutBiometricsDataInput;
  create: ClientCreateWithoutBiometricsInput;
}

export interface BiometricUpdateManyWithWhereNestedInput {
  where: BiometricScalarWhereInput;
  data: BiometricUpdateManyDataInput;
}

export interface BiometricUpdateManyMutationInput {
  weight?: Maybe<Float>;
  height?: Maybe<Float>;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  OR?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  NOT?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface ClientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  biometrics_every?: Maybe<BiometricWhereInput>;
  biometrics_some?: Maybe<BiometricWhereInput>;
  biometrics_none?: Maybe<BiometricWhereInput>;
  trainerId?: Maybe<UserWhereInput>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  OR?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  NOT?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export interface ClientScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  OR?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  NOT?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
}

export interface BiometricUpsertWithWhereUniqueWithoutClientIdInput {
  where: BiometricWhereUniqueInput;
  update: BiometricUpdateWithoutClientIdDataInput;
  create: BiometricCreateWithoutClientIdInput;
}

export interface ClientUpdateManyWithoutTrainerIdInput {
  create?: Maybe<
    ClientCreateWithoutTrainerIdInput[] | ClientCreateWithoutTrainerIdInput
  >;
  delete?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  connect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  set?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  disconnect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
  update?: Maybe<
    | ClientUpdateWithWhereUniqueWithoutTrainerIdInput[]
    | ClientUpdateWithWhereUniqueWithoutTrainerIdInput
  >;
  upsert?: Maybe<
    | ClientUpsertWithWhereUniqueWithoutTrainerIdInput[]
    | ClientUpsertWithWhereUniqueWithoutTrainerIdInput
  >;
  deleteMany?: Maybe<ClientScalarWhereInput[] | ClientScalarWhereInput>;
  updateMany?: Maybe<
    | ClientUpdateManyWithWhereNestedInput[]
    | ClientUpdateManyWithWhereNestedInput
  >;
}

export interface ClientCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeInput;
  biometrics?: Maybe<BiometricCreateManyWithoutClientIdInput>;
  trainerId?: Maybe<UserCreateOneWithoutClientsInput>;
}

export interface ClientCreateManyWithoutTrainerIdInput {
  create?: Maybe<
    ClientCreateWithoutTrainerIdInput[] | ClientCreateWithoutTrainerIdInput
  >;
  connect?: Maybe<ClientWhereUniqueInput[] | ClientWhereUniqueInput>;
}

export interface BiometricCreateManyWithoutClientIdInput {
  create?: Maybe<
    BiometricCreateWithoutClientIdInput[] | BiometricCreateWithoutClientIdInput
  >;
  connect?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
}

export interface BiometricUpdateManyDataInput {
  weight?: Maybe<Float>;
  height?: Maybe<Float>;
}

export interface BiometricUpdateWithWhereUniqueWithoutClientIdInput {
  where: BiometricWhereUniqueInput;
  data: BiometricUpdateWithoutClientIdDataInput;
}

export interface BiometricUpdateManyWithoutClientIdInput {
  create?: Maybe<
    BiometricCreateWithoutClientIdInput[] | BiometricCreateWithoutClientIdInput
  >;
  delete?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  connect?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  set?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  disconnect?: Maybe<BiometricWhereUniqueInput[] | BiometricWhereUniqueInput>;
  update?: Maybe<
    | BiometricUpdateWithWhereUniqueWithoutClientIdInput[]
    | BiometricUpdateWithWhereUniqueWithoutClientIdInput
  >;
  upsert?: Maybe<
    | BiometricUpsertWithWhereUniqueWithoutClientIdInput[]
    | BiometricUpsertWithWhereUniqueWithoutClientIdInput
  >;
  deleteMany?: Maybe<BiometricScalarWhereInput[] | BiometricScalarWhereInput>;
  updateMany?: Maybe<
    | BiometricUpdateManyWithWhereNestedInput[]
    | BiometricUpdateManyWithWhereNestedInput
  >;
}

export interface ClientUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  biometrics?: Maybe<BiometricUpdateManyWithoutClientIdInput>;
  trainerId?: Maybe<UserUpdateOneWithoutClientsInput>;
}

export interface BiometricCreateWithoutClientIdInput {
  id?: Maybe<ID_Input>;
  weight?: Maybe<Float>;
  height?: Maybe<Float>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  clients_every?: Maybe<ClientWhereInput>;
  clients_some?: Maybe<ClientWhereInput>;
  clients_none?: Maybe<ClientWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  clients?: Maybe<ClientCreateManyWithoutTrainerIdInput>;
}

export interface UserUpdateInput {
  clients?: Maybe<ClientUpdateManyWithoutTrainerIdInput>;
}

export interface ClientUpdateWithoutTrainerIdDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  biometrics?: Maybe<BiometricUpdateManyWithoutClientIdInput>;
}

export interface ClientUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BiometricConnection {
  pageInfo: PageInfo;
  edges: BiometricEdge[];
}

export interface BiometricConnectionPromise
  extends Promise<BiometricConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BiometricEdge>>() => T;
  aggregate: <T = AggregateBiometricPromise>() => T;
}

export interface BiometricConnectionSubscription
  extends Promise<AsyncIterator<BiometricConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BiometricEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBiometricSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BiometricPreviousValues {
  id: ID_Output;
  weight?: Float;
  height?: Float;
  createdAt: DateTimeOutput;
}

export interface BiometricPreviousValuesPromise
  extends Promise<BiometricPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  weight: () => Promise<Float>;
  height: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BiometricPreviousValuesSubscription
  extends Promise<AsyncIterator<BiometricPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  weight: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeOutput;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Client {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  birthdate: DateTimeOutput;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  biometrics: <T = FragmentableArray<Biometric>>(args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trainerId: <T = UserPromise>() => T;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  biometrics: <T = Promise<AsyncIterator<BiometricSubscription>>>(args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trainerId: <T = UserSubscription>() => T;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  biometrics: <T = FragmentableArray<Biometric>>(args?: {
    where?: BiometricWhereInput;
    orderBy?: BiometricOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trainerId: <T = UserPromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBiometric {
  count: Int;
}

export interface AggregateBiometricPromise
  extends Promise<AggregateBiometric>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBiometricSubscription
  extends Promise<AsyncIterator<AggregateBiometric>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BiometricSubscriptionPayload {
  mutation: MutationType;
  node: Biometric;
  updatedFields: String[];
  previousValues: BiometricPreviousValues;
}

export interface BiometricSubscriptionPayloadPromise
  extends Promise<BiometricSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BiometricPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BiometricPreviousValuesPromise>() => T;
}

export interface BiometricSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BiometricSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BiometricSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BiometricPreviousValuesSubscription>() => T;
}

export interface Biometric {
  id: ID_Output;
  weight?: Float;
  height?: Float;
  createdAt: DateTimeOutput;
}

export interface BiometricPromise extends Promise<Biometric>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: <T = ClientPromise>() => T;
  weight: () => Promise<Float>;
  height: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BiometricSubscription
  extends Promise<AsyncIterator<Biometric>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientId: <T = ClientSubscription>() => T;
  weight: () => Promise<AsyncIterator<Float>>;
  height: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BiometricNullablePromise
  extends Promise<Biometric | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientId: <T = ClientPromise>() => T;
  weight: () => Promise<Float>;
  height: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  clients: <T = FragmentableArray<Client>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clients: <T = Promise<AsyncIterator<ClientSubscription>>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clients: <T = FragmentableArray<Client>>(args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BiometricEdge {
  node: Biometric;
  cursor: String;
}

export interface BiometricEdgePromise
  extends Promise<BiometricEdge>,
    Fragmentable {
  node: <T = BiometricPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BiometricEdgeSubscription
  extends Promise<AsyncIterator<BiometricEdge>>,
    Fragmentable {
  node: <T = BiometricSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Client",
    embedded: false
  },
  {
    name: "Biometric",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/exrx/exrx_service/dev`
});
export const prisma = new Prisma();
